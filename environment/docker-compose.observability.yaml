# Docker Compose that contains a complete Grafana observability stack with Tempo, Mimir, Loki, Grafana Agent, and Grafana.
# Services are not intended to be run directly but rather contain definitions for use in other Docker Compose files.
services:

  # Start Grafana Tempo to receive and store tracing data
  # This configuration is largely inspired by the Tempo local storage docker-compose example:
  # https://github.com/grafana/tempo/blob/main/example/docker-compose/local/docker-compose.yaml
  # It uses a latest version of the Tempo image at the time of writing.
  tempo:
    image: grafana/tempo:2.3.1
    command: [ "-config.file=/etc/grafana-tempo.yaml" ]
    restart: always
    volumes:
      - ./mount/grafana-tempo.yaml:/etc/grafana-tempo.yaml
    ports:
      - "5317:4317"  # otlp grpc
      - "5318:4318"  # otlp http
      - "3200:3200"  # tempo

  # Starts Grafana Mimir to receive and store metrics data.
  # This configuration is largely inspired by the Mimir "Get Started" documentation:
  # https://grafana.com/docs/mimir/latest/get-started/
  # It uses a latest version of the Mimir image at the time of writing.
  mimir:
    image: grafana/mimir:2.11.0
    command: [ "-config.file=/etc/grafana-mimir.yaml" ]
    restart: always
    volumes:
      - ./mount/grafana-mimir.yaml:/etc/grafana-mimir.yaml
    ports:
      - "9009:9009" # Mimir port

  # Starts Grafana Loki to receive and store logs data.
  # This configuration is largely inspired by the following documentation:
  # https://grafana.com/docs/loki/latest/setup/install/docker/
  # It uses the latest version of the Loki image at the time of writing.
  loki:
    image: grafana/loki:2.9.4
    command: ["-config.file=/etc/loki/grafana-loki.yaml"]
    restart: always
    volumes:
      - ./mount/grafana-loki.yaml:/etc/loki/grafana-loki.yaml
    ports:
      - "3100:3100" # Loki port

  # Start a grafana agent to receive data from OpenTelemetry collector.
  # See for more details: https://grafana.com/docs/agent/latest/static/set-up/install/install-agent-docker/
  grafana-agent:
    image: grafana/agent:v0.39.2
    restart: always
    environment:
      - AGENT_MODE=flow
    depends_on:
      - tempo
      - mimir
      - loki
    volumes:
      - ./mount/grafana-agent.river:/etc/agent/grafana-agent.river
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - /etc/agent/grafana-agent.river
    ports:
      - "6317:4317"  # OTLP grpc
      - "6318:4318"  # OTLP http
      - "12345:12345" # UI

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.93.0
    hostname: otel-collector
    restart: always
    depends_on:
      - grafana-agent
    volumes:
      - ./mount/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - "4317:4317" # OTLP grpc receiver

  grafana:
    image: grafana/grafana:10.2.2
    hostname: grafana
    restart: always
    depends_on:
      - grafana-agent
    volumes:
      - ./mount/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor traceQLStreaming metricsSummary
    ports:
      - "3001:3000"
