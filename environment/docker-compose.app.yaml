# Docker Compose that contains the application services and their dependencies.
# Essentially, this is a system under monitoring.
services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep -q PONG" ]

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS:
    ports:
      - "9092:9092"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15-alpine
    hostname: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d products -t 5" ]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 1s
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: products
    ports:
      - "5432:5432"

  products-service:
    image: products-service:latest
    hostname: products-service
    environment:
      MIGRATE_DATABASE_URL: "postgresql://user:password@postgres:5432/products"
      DATABASE_URL: "postgresql+asyncpg://user:password@postgres:5432/products"
      OTEL_SERVICE_NAME: products_service
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOG_LEVEL: debug
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "8001:8000"

  orders-service:
    image: orders-service:latest
    hostname: orders-service
    environment:
      REDIS_URL: "redis://redis:6379/0"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_TOPIC: "orders"
      SERVICE_NAME: "orders-service"
      PRODUCT_SERVICE_URL: "http://products-service:8000"
      OTEL_SERVICE_NAME: orders_service
      OTEL_METRICS_EXPORTER: otlp
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: otlp
      OTEL_LOG_LEVEL: debug
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317
    depends_on:
      kafka:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
      products-service:
        condition: service_healthy
        restart: true
    ports:
      - "8000:8000"