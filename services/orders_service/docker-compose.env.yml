version: "3.8"

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep -q PONG" ]

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS:
    ports:
      - "9092:9092"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:15-alpine
    hostname: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d products -t 5" ]
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 1s
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: products
    ports:
      - "5432:5432"

  products-service:
    image: products-service:latest
    hostname: products-service
    environment:
      MIGRATE_DATABASE_URL: "postgresql://user:password@postgres:5432/products"
      DATABASE_URL: "postgresql+asyncpg://user:password@postgres:5432/products"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
        test: [ "CMD-SHELL", "curl -f http://localhost:8000/health || exit 1" ]
        interval: 10s
        timeout: 10s
        retries: 5
    ports:
      - "8001:8000"